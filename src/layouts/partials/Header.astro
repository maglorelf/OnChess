---
import Logo from "@components/Logo.astro";
import menu from "@config/menu.json";
import UserProfile from "@layouts/function-components/UserProfile.jsx";
import { auth, USER_ROLES } from "@lib/utils/middleware";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { pathname } = Astro.url;

// Check if user is authenticated
const { user, isAuthenticated } = await auth(Astro.request);
const isPremium = isAuthenticated && (user?.role === USER_ROLES.PREMIUM || user?.role === USER_ROLES.ADMIN);

// Add lessons link to menu for authenticated users
const extendedMenu = [...main];
if (isAuthenticated) {
  // Find if lessons already exists
  const lessonsMenuIndex = extendedMenu.findIndex(item => item.name === "Lessons");
  
  if (lessonsMenuIndex === -1) {
    // Add lessons menu if it doesn't exist
    extendedMenu.push({
      name: "Lessons",
      url: "/lessons",
      hasChildren: true,
      children: [
        {
          name: "All Lessons",
          url: "/lessons"
        },
        ...(isPremium ? [{
          name: "Premium Lessons",
          url: "/lessons/premium"
        }] : [])
      ]
    });
  } else if (isPremium) {
    // Add premium lessons to existing menu
    const premiumLessonExists = extendedMenu[lessonsMenuIndex].children?.some(
      child => child.url === "/lessons/premium"
    );
    
    if (!premiumLessonExists && extendedMenu[lessonsMenuIndex].children) {
      extendedMenu[lessonsMenuIndex].children.push({
        name: "Premium Lessons",
        url: "/lessons/premium"
      });
    }
  }
}
---

<header class="header">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <Logo />
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:order-1 lg:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:order-1"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2"
    >
      {
        extendedMenu.map((menu) => (
          <>
            {menu.hasChildren ? (
              <li
                class="nav-item nav-dropdown group relative cursor-pointer "
                id="dropdown-button"
              >
                <span
                  class={`nav-link inline-flex items-center ${
                    menu.children?.map(({ url }) => url).includes(pathname) ||
                    menu.children
                      ?.map(({ url }) => `${url}/`)
                      .includes(pathname)
                      ? "active"
                      : ""
                  }`}
                >
                  {menu.name}
                  <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </span>
                <ul
                  id="dropdown"
                  class="nav-dropdown-list mx-auto hidden duration-300 lg:invisible lg:absolute lg:block lg:h-auto lg:w-[13.5rem] lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100"
                >
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a
                        href={child.url}
                        class={`nav-dropdown-link block ${
                          (pathname === `${child.url}/` ||
                            pathname === child.url) &&
                          "text-primary"
                        }`}
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item">
                <a
                  href={menu.url}
                  class={`nav-link inline-block lg:block ${
                    (pathname === `${menu.url}/` || pathname === menu.url) &&
                    "active"
                  }`}
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }
      <li class="nav-item mt-2 lg:hidden">
        {isAuthenticated ? (
          <div class="px-4 py-3">
            <UserProfile client:load user={user} />
          </div>
        ) : (
          <a class="btn btn-white btn-sm border-border" href="/signin">Sign In</a>
        )}
      </li>
    </ul>
    <div class="order-1 ml-auto hidden items-center md:order-2 md:ml-0 lg:flex">
      {isAuthenticated ? (
        <div class="relative group">
          <div class="flex items-center cursor-pointer gap-2">
            <div class="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center text-primary">
              {user.username.charAt(0).toUpperCase()}
            </div>
            <span>{user.username}</span>
            <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
              <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
            </svg>
          </div>
          <div class="absolute right-0 mt-2 w-64 invisible opacity-0 group-hover:visible group-hover:opacity-100 transition-all duration-300">
            <UserProfile client:load user={user} />
          </div>
        </div>
      ) : (
        <a class="btn btn-primary btn-sm" href="/signin">Sign In</a>
      )}
    </div>
  </nav>
</header>
<script is:inline>
  const buttons = document.querySelectorAll('[id="dropdown-button"]');
  buttons.forEach(button => {
    button.addEventListener("click", () => {
      const dropdown = button.querySelector('[id="dropdown"]');
      if (dropdown) {
        dropdown.classList.toggle("hidden");
      }
    });
  });

  //sticky header
  const header = document.querySelector(".header");
  window.addEventListener("scroll", () => {
    const scrollY = window.scrollY;
    if (scrollY > 0) {
      header.classList.add("header-sticky");
    } else {
      header.classList.remove("header-sticky");
    }
  });
</script>
